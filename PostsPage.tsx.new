import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useParams, useLocation } from "wouter";
import { format } from "date-fns";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Loader2, Plus, Calendar as CalendarIcon, BarChart, X, Tag, Trash2, Edit } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface Post {
  id: number;
  location_id: number;
  title: string;
  content: string;
  image_url?: string;
  cta_type?: "LEARN_MORE" | "BOOK" | "ORDER" | "SHOP" | "SIGN_UP" | "CALL";
  cta_url?: string;
  scheduled_date?: Date;
  status: "draft" | "scheduled" | "published" | "failed";
  published_at?: Date;
  category?: string;
  tags?: string[];
}

interface PostsListResponse {
  success: boolean;
  message: string;
  posts: Post[];
}

export default function PostsPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { locationId } = useParams<{ locationId: string }>();
  const [activeTab, setActiveTab] = useState<string>("scheduled");
  
  // State for managing post creation and editing
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [currentPost, setCurrentPost] = useState<Post | null>(null);
  const [dialogTitle, setDialogTitle] = useState<string>("Create New Post");
  const [postForm, setPostForm] = useState({
    title: "",
    content: "",
    image_url: "",
    cta_type: "LEARN_MORE" as "LEARN_MORE" | "BOOK" | "ORDER" | "SHOP" | "SIGN_UP" | "CALL",
    cta_url: "",
    scheduled_date: new Date(),
    status: "draft" as "draft" | "scheduled" | "published" | "failed",
    category: "",
    tags: [] as string[]
  });
  
  // State for managing tags input
  const [newTag, setNewTag] = useState<string>("");
  
  // Predefined categories
  const categories = [
    "Event", 
    "Offer", 
    "Update", 
    "News", 
    "Product", 
    "Service", 
    "Promotion", 
    "Holiday", 
    "Announcement", 
    "Other"
  ];
  
  // Function to handle adding a new tag
  const handleAddTag = () => {
    if (newTag.trim() && !postForm.tags.includes(newTag.trim())) {
      setPostForm({
        ...postForm,
        tags: [...postForm.tags, newTag.trim()]
      });
      setNewTag("");
    }
  };
  
  // Function to handle removing a tag
  const handleRemoveTag = (tagToRemove: string) => {
    setPostForm({
      ...postForm,
      tags: postForm.tags.filter(tag => tag !== tagToRemove)
    });
  };
  
  // Function to handle category change
  const handleCategoryChange = (category: string) => {
    setPostForm({
      ...postForm,
      category
    });
  };
  
  // Function to reset the post form
  const resetPostForm = () => {
    setPostForm({
      title: "",
      content: "",
      image_url: "",
      cta_type: "LEARN_MORE",
      cta_url: "",
      scheduled_date: new Date(),
      status: "draft",
      category: "",
      tags: []
    });
    setCurrentPost(null);
    setDialogTitle("Create New Post");
  };
  
  // Create a new post
  const createPostMutation = useMutation({
    mutationFn: async (post: typeof postForm) => {
      const response = await apiRequest('POST', `/api/posts/${locationId}`, post);
      return await response.json();
    },
    onSuccess: (data: { success: boolean; message: string; post: Post }) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message || "Post created successfully",
      });
      resetPostForm();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Update an existing post
  const updatePostMutation = useMutation({
    mutationFn: async (post: typeof postForm & { id: number }) => {
      const { id, ...postData } = post;
      const response = await apiRequest('PUT', `/api/posts/${locationId}/${id}`, postData);
      return await response.json();
    },
    onSuccess: (data: { success: boolean; message: string; post: Post }) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message || "Post updated successfully",
      });
      resetPostForm();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Handle creating or updating a post
  const handleCreateOrUpdate = () => {
    // Validate form data
    if (!postForm.title.trim()) {
      toast({
        title: "Validation Error",
        description: "Post title is required",
        variant: "destructive",
      });
      return;
    }
    
    if (!postForm.content.trim()) {
      toast({
        title: "Validation Error",
        description: "Post content is required",
        variant: "destructive",
      });
      return;
    }
    
    if (postForm.status === "scheduled" && !postForm.scheduled_date) {
      toast({
        title: "Validation Error",
        description: "Scheduled date is required for scheduled posts",
        variant: "destructive",
      });
      return;
    }
    
    if (currentPost) {
      // Update existing post
      updatePostMutation.mutate({
        id: currentPost.id,
        ...postForm
      });
    } else {
      // Create new post
      createPostMutation.mutate(postForm);
    }
    
    // Close dialog if open
    setIsCreateDialogOpen(false);
  };
  
  // Handle editing a post
  const handleEditPost = (post: Post) => {
    setCurrentPost(post);
    setPostForm({
      title: post.title,
      content: post.content,
      image_url: post.image_url || "",
      cta_type: post.cta_type || "LEARN_MORE",
      cta_url: post.cta_url || "",
      scheduled_date: post.scheduled_date ? new Date(post.scheduled_date) : new Date(),
      status: post.status,
      category: post.category || "",
      tags: post.tags || []
    });
    setDialogTitle(`Edit ${post.status.charAt(0).toUpperCase() + post.status.slice(1)} Post`);
    setIsCreateDialogOpen(true);
  };
  
  // Handle confirmation to delete a post
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [postToDelete, setPostToDelete] = useState<Post | null>(null);
  
  const handleDeletePost = (post: Post) => {
    setPostToDelete(post);
    setIsDeleteDialogOpen(true);
  };
  
  // Delete a post
  const deletePostMutation = useMutation({
    mutationFn: async (postId: number) => {
      const response = await apiRequest('DELETE', `/api/posts/${locationId}/${postId}`);
      return await response.json();
    },
    onSuccess: (data: { success: boolean; message: string }) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message || "Post deleted successfully",
      });
      setIsDeleteDialogOpen(false);
      setPostToDelete(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Load posts for the location
  const { 
    data: postsData, 
    isLoading: isLoadingPosts,
    error: postsError,
    refetch
  } = useQuery<PostsListResponse>({
    queryKey: ['/api/posts', locationId],
    queryFn: async () => {
      // If locationId is not provided, use the first location
      if (!locationId) {
        // Fetch all locations
        const locationsResponse = await apiRequest('GET', '/api/gbp/locations');
        const locationsData = await locationsResponse.json();
        if (locationsData.success && locationsData.locations && locationsData.locations.length > 0) {
          // Use the first location's ID
          const firstLocationId = locationsData.locations[0].id;
          const response = await apiRequest('GET', `/api/posts/${firstLocationId}`);
          return await response.json();
        } else {
          throw new Error('No locations available');
        }
      } else {
        const response = await apiRequest('GET', `/api/posts/${locationId}`);
        return await response.json();
      }
    },
    enabled: true, // Always try to fetch posts
  });

  // Handle submenu clicks
  useEffect(() => {
    const handleSubMenuClick = (event: CustomEvent) => {
      const { id } = event.detail;
      if (id === 'create') {
        setActiveTab('create');
      } else if (['scheduled', 'published', 'draft', 'analytics'].includes(id)) {
        setActiveTab(id);
      }
    };
    
    window.addEventListener('submenuClicked', handleSubMenuClick as EventListener);
    
    return () => {
      window.removeEventListener('submenuClicked', handleSubMenuClick as EventListener);
    };
  }, []);

  // Filter posts by status
  const draftPosts = postsData?.posts.filter(post => post.status === "draft") || [];
  const scheduledPosts = postsData?.posts.filter(post => post.status === "scheduled") || [];
  const publishedPosts = postsData?.posts.filter(post => post.status === "published") || [];

  // Show loading state while fetching location data
  if (isLoadingPosts) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <Loader2 className="h-10 w-10 text-[#F28C38] animate-spin mb-4" />
        <p className="text-gray-600">Loading posts data...</p>
      </div>
    );
  }
  
  // Show error state if posts could not be loaded
  if (postsError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <h1 className="text-2xl font-bold text-red-500 mb-4">Error Loading Posts</h1>
        <p className="text-gray-600 mb-6">{(postsError as Error).message}</p>
        <Button onClick={() => refetch()} variant="outline">
          Retry
        </Button>
      </div>
    );
  }

  return (
    <div className="container py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Post Management</h1>
        <div className="flex gap-3">
          <Button 
            className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
            onClick={() => {
              resetPostForm();
              setIsCreateDialogOpen(true);
            }}
          >
            <Plus size={16} className="mr-1" />
            Create Post
          </Button>
        </div>
      </div>
      
      {/* Delete Post Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent className="bg-white">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-black">Are you sure you want to delete this post?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the post.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setPostToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => {
                if (postToDelete) {
                  deletePostMutation.mutate(postToDelete.id);
                }
              }}
              className="bg-red-500 hover:bg-red-600 text-white"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      
      {/* Create/Edit Post Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="max-w-[600px] bg-white">
          <DialogHeader>
            <DialogTitle className="text-black">{dialogTitle}</DialogTitle>
            <DialogDescription>
              Fill in the details to create a new post for your Google Business Profile.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="title" className="text-black">Title</Label>
              <Input
                id="title"
                className="col-span-3 text-black"
                value={postForm.title}
                onChange={(e) => setPostForm({...postForm, title: e.target.value})}
                placeholder="Enter post title"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="content" className="text-black">Content</Label>
              <Textarea
                id="content"
                className="col-span-3 min-h-[100px] text-black"
                value={postForm.content}
                onChange={(e) => setPostForm({...postForm, content: e.target.value})}
                placeholder="Enter post content"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="image_url" className="text-black">Image URL</Label>
              <Input
                id="image_url"
                className="col-span-3 text-black"
                value={postForm.image_url}
                onChange={(e) => setPostForm({...postForm, image_url: e.target.value})}
                placeholder="Enter image URL (optional)"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="category" className="text-black">Category</Label>
              <Select
                value={postForm.category}
                onValueChange={handleCategoryChange}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map(category => (
                    <SelectItem key={category} value={category}>{category}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="tags" className="text-black">Tags</Label>
              <div className="col-span-3 flex flex-col gap-2">
                <div className="flex gap-2">
                  <Input
                    id="tags"
                    className="flex-1 text-black"
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    placeholder="Enter tag"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        handleAddTag();
                      }
                    }}
                  />
                  <Button 
                    type="button" 
                    onClick={handleAddTag}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    Add
                  </Button>
                </div>
                {postForm.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {postForm.tags.map(tag => (
                      <Badge key={tag} className="bg-[#F28C38] flex items-center gap-1 text-white">
                        <Tag size={14} />
                        {tag}
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="h-4 w-4 p-0 hover:bg-transparent"
                          onClick={() => handleRemoveTag(tag)}
                        >
                          <X size={14} />
                        </Button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsCreateDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button 
              className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
              onClick={handleCreateOrUpdate}
            >
              {currentPost ? 'Update' : 'Create'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="mb-6 bg-black text-white">
          <TabsTrigger 
            value="create" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <Plus size={16} />
            Create Post
          </TabsTrigger>
          <TabsTrigger 
            value="scheduled" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <CalendarIcon size={16} />
            Scheduled
            {scheduledPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{scheduledPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="published"
            className="data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            Published
            {publishedPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{publishedPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="draft"
            className="data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            Drafts
            {draftPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{draftPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="analytics" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <BarChart size={16} />
            Analytics
          </TabsTrigger>
        </TabsList>

        <TabsContent value="create">
          <Card>
            <CardHeader>
              <CardTitle>Create Post</CardTitle>
              <CardDescription>Create a new post for your Google Business Profile</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="create-title" className="text-black mb-2 block">Post Title</Label>
                    <Input
                      id="create-title"
                      className="text-black mb-4"
                      value={postForm.title}
                      onChange={(e) => setPostForm({...postForm, title: e.target.value})}
                      placeholder="Enter post title"
                    />
                    
                    <Label htmlFor="create-content" className="text-black mb-2 block">Post Content</Label>
                    <Textarea
                      id="create-content"
                      className="min-h-[150px] text-black mb-4"
                      value={postForm.content}
                      onChange={(e) => setPostForm({...postForm, content: e.target.value})}
                      placeholder="Enter post content"
                    />
                    
                    <Label htmlFor="create-image" className="text-black mb-2 block">Image URL</Label>
                    <Input
                      id="create-image"
                      className="text-black mb-4"
                      value={postForm.image_url}
                      onChange={(e) => setPostForm({...postForm, image_url: e.target.value})}
                      placeholder="Enter image URL (optional)"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="create-category" className="text-black mb-2 block">Category</Label>
                    <Select
                      value={postForm.category}
                      onValueChange={handleCategoryChange}
                    >
                      <SelectTrigger className="mb-4">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {categories.map(category => (
                          <SelectItem key={category} value={category}>{category}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    
                    <Label htmlFor="create-tags" className="text-black mb-2 block">Tags</Label>
                    <div className="flex flex-col gap-2 mb-4">
                      <div className="flex gap-2">
                        <Input
                          id="create-tags"
                          className="flex-1 text-black"
                          value={newTag}
                          onChange={(e) => setNewTag(e.target.value)}
                          placeholder="Enter tag"
                          onKeyDown={(e) => {
                            if (e.key === 'Enter' && !e.shiftKey) {
                              e.preventDefault();
                              handleAddTag();
                            }
                          }}
                        />
                        <Button 
                          type="button" 
                          onClick={handleAddTag}
                          className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                        >
                          Add
                        </Button>
                      </div>
                      {postForm.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2 mt-2">
                          {postForm.tags.map(tag => (
                            <Badge key={tag} className="bg-[#F28C38] flex items-center gap-1 text-white">
                              <Tag size={14} />
                              {tag}
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                className="h-4 w-4 p-0 hover:bg-transparent"
                                onClick={() => handleRemoveTag(tag)}
                              >
                                <X size={14} />
                              </Button>
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <Label htmlFor="create-status" className="text-black mb-2 block">Status</Label>
                    <Select
                      value={postForm.status}
                      onValueChange={(val) => setPostForm({...postForm, status: val as "draft" | "scheduled" | "published" | "failed"})}
                    >
                      <SelectTrigger className="mb-4">
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="draft">Draft</SelectItem>
                        <SelectItem value="scheduled">Scheduled</SelectItem>
                        <SelectItem value="published">Published</SelectItem>
                      </SelectContent>
                    </Select>
                    
                    {postForm.status === "scheduled" && (
                      <div className="mb-4">
                        <Label htmlFor="create-date" className="text-black mb-2 block">Scheduled Date</Label>
                        <Input
                          id="create-date"
                          type="date"
                          className="text-black"
                          value={postForm.scheduled_date ? format(postForm.scheduled_date, 'yyyy-MM-dd') : ''}
                          onChange={(e) => {
                            const date = e.target.value ? new Date(e.target.value) : new Date();
                            setPostForm({...postForm, scheduled_date: date});
                          }}
                        />
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <Button 
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                    onClick={handleCreateOrUpdate}
                  >
                    {currentPost ? 'Update Post' : 'Create Post'}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="scheduled">
          <Card>
            <CardHeader>
              <CardTitle>Scheduled Posts</CardTitle>
              <CardDescription>View and manage your scheduled posts</CardDescription>
            </CardHeader>
            <CardContent>
              {scheduledPosts.length === 0 ? (
                <p>No scheduled posts</p>
              ) : (
                <ul>
                  {scheduledPosts.map(post => (
                    <li key={post.id} className="p-4 border mb-2 rounded">
                      <div className="flex justify-between">
                        <h3 className="font-bold">{post.title}</h3>
                        <div className="flex gap-2">
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleEditPost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-[#F28C38]"
                          >
                            <Edit size={16} />
                          </Button>
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleDeletePost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-red-500"
                          >
                            <Trash2 size={16} />
                          </Button>
                        </div>
                      </div>
                      <p className="text-gray-700 my-2">{post.content.slice(0, 100)}...</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        <Badge className="bg-[#F28C38] text-white">
                          Scheduled: {post.scheduled_date ? format(new Date(post.scheduled_date as any), 'MMM dd, yyyy') : 'N/A'}
                        </Badge>
                        {post.category && (
                          <Badge variant="outline" className="border-[#F28C38] text-black">
                            {post.category}
                          </Badge>
                        )}
                        {post.tags && post.tags.length > 0 && post.tags.map(tag => (
                          <Badge key={tag} variant="outline" className="flex items-center gap-1 border-[#F28C38] text-black">
                            <Tag size={12} className="text-[#F28C38]" />
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="published">
          <Card>
            <CardHeader>
              <CardTitle>Published Posts</CardTitle>
              <CardDescription>View your published posts</CardDescription>
            </CardHeader>
            <CardContent>
              {publishedPosts.length === 0 ? (
                <p>No published posts</p>
              ) : (
                <ul>
                  {publishedPosts.map(post => (
                    <li key={post.id} className="p-4 border mb-2 rounded">
                      <div className="flex justify-between">
                        <h3 className="font-bold">{post.title}</h3>
                        <div className="flex gap-2">
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleEditPost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-[#F28C38]"
                          >
                            <Edit size={16} />
                          </Button>
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleDeletePost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-red-500"
                          >
                            <Trash2 size={16} />
                          </Button>
                        </div>
                      </div>
                      <p className="text-gray-700 my-2">{post.content.slice(0, 100)}...</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        <Badge className="bg-[#F28C38] text-white">
                          Published: {post.published_at ? format(new Date(post.published_at as any), 'MMM dd, yyyy') : 'N/A'}
                        </Badge>
                        {post.category && (
                          <Badge variant="outline" className="border-[#F28C38] text-black">
                            {post.category}
                          </Badge>
                        )}
                        {post.tags && post.tags.length > 0 && post.tags.map(tag => (
                          <Badge key={tag} variant="outline" className="flex items-center gap-1 border-[#F28C38] text-black">
                            <Tag size={12} className="text-[#F28C38]" />
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="draft">
          <Card>
            <CardHeader>
              <CardTitle>Draft Posts</CardTitle>
              <CardDescription>View and manage your draft posts</CardDescription>
            </CardHeader>
            <CardContent>
              {draftPosts.length === 0 ? (
                <p>No draft posts</p>
              ) : (
                <ul>
                  {draftPosts.map(post => (
                    <li key={post.id} className="p-4 border mb-2 rounded">
                      <div className="flex justify-between">
                        <h3 className="font-bold">{post.title}</h3>
                        <div className="flex gap-2">
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleEditPost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-[#F28C38]"
                          >
                            <Edit size={16} />
                          </Button>
                          <Button 
                            size="sm"
                            variant="ghost"
                            onClick={() => handleDeletePost(post)}
                            className="h-8 px-2 text-gray-700 hover:text-red-500"
                          >
                            <Trash2 size={16} />
                          </Button>
                        </div>
                      </div>
                      <p className="text-gray-700 my-2">{post.content.slice(0, 100)}...</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        <Badge className="bg-[#F28C38] text-white">Draft</Badge>
                        {post.category && (
                          <Badge variant="outline" className="border-[#F28C38] text-black">
                            {post.category}
                          </Badge>
                        )}
                        {post.tags && post.tags.length > 0 && post.tags.map(tag => (
                          <Badge key={tag} variant="outline" className="flex items-center gap-1 border-[#F28C38] text-black">
                            <Tag size={12} className="text-[#F28C38]" />
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics">
          <Card>
            <CardHeader>
              <CardTitle>Analytics</CardTitle>
              <CardDescription>View performance metrics for your posts</CardDescription>
            </CardHeader>
            <CardContent>
              <p>Analytics content will go here</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}