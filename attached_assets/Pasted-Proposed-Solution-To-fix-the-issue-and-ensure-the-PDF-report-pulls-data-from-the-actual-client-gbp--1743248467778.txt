Proposed Solution
To fix the issue and ensure the PDF report pulls data from the actual /client/gbp-audit screens and tabs, we need to:

Verify Data Retrieval in audit-service.ts:
Ensure getLatestAudit() fetches the correct data from the GBP Insights tabs.
Update the function to aggregate data from all tabs (Overview, Keywords, Reviews, etc.) if itâ€™s not already doing so.
Fix Data Structuring in reports-routes.ts:
Ensure the data passed to generatePdfReport() matches the ReportData interface.
Remove any fallback to dummy data.
Update Data Access in report-generator.ts:
Fix how generatePdfReport() accesses fields from the ReportData interface.
Remove any hardcoded dummy data or fallbacks.
Add Logging for Debugging:
Add logs at each step to trace the data flow and identify where the dummy data is being introduced.
Step-by-Step Fix
1. Update audit-service.ts to Fetch Correct Data
Goal: Ensure getLatestAudit() returns the actual data from the GBP Insights tabs.
Action:
Check the implementation of getLatestAudit() (around line 3135 in audit-service.ts).
Verify that it fetches data from the correct source (e.g., a database or API that stores the GBP Insights data).
If the data is stored in a database, ensure the query retrieves the latest audit data for the given locationId.
If the data needs to be aggregated from the GBP Insights tabs, update the function to call the same endpoints or services used by the /client/gbp-audit screens (e.g., the endpoints that populate the Overview, Keywords, Reviews tabs).
Example (Pseudo-code):
typescript

Collapse

Wrap

Copy
async getLatestAudit(locationId: string): Promise<AuditData> {
  // Fetch data from the same source as /client/gbp-audit
  const overviewData = await this.fetchOverviewData(locationId);
  const keywordsData = await this.fetchKeywordsData(locationId);
  const reviewsData = await this.fetchReviewsData(locationId);
  // ... fetch data for other tabs (Posting, Citations, Performance, etc.)

  // Log the data to verify
  console.log('Audit Data:', { overviewData, keywordsData, reviewsData });

  return {
    overview: overviewData,
    keywords: keywordsData,
    reviews: reviewsData,
    // ... other tab data
  };
}
Check:
Add a log statement in getLatestAudit() to print the returned data.
Ensure the returned data includes fields for all tabs (e.g., overview, keywords, reviews, etc.) and matches the data shown in the /client/gbp-audit screens.
2. Fix Data Structuring in reports-routes.ts
Goal: Ensure the data passed to generatePdfReport() matches the ReportData interface and contains the actual audit data.
Action:
In reports-routes.ts (lines 222-231), check how the data is structured before being passed to generatePdfReport().
Remove any fallback to dummy data.
Ensure the data structure aligns with the ReportData interface expected by report-generator.ts.
Example (Pseudo-code):
typescript

Collapse

Wrap

Copy
// In reports-routes.ts
router.post('/api/client/reports/:locationId', async (req, res) => {
  const { locationId } = req.params;

  try {
    // Fetch location data
    const locationData = await getLocationData(locationId);

    // Fetch audit data
    const auditData = await gbpAuditService.getLatestAudit(locationId);
    if (!auditData) {
      throw new Error('No audit data found for this location');
    }

    // Fetch competitor data
    const competitorData = await competitorsService.getCompetitorAnalysis(locationId);

    // Structure the data for the report
    const reportData: ReportData = {
      location: locationData,
      audit: auditData,
      competitors: competitorData,
    };

    // Log the data to verify
    console.log('Report Data:', reportData);

    // Generate the PDF
    const pdfUrl = await generatePdfReport(reportData);
    res.json({ success: true, reportUrl });
  } catch (error) {
    console.error('Error generating report:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});
Check:
Add a log statement to print the reportData object before passing it to generatePdfReport().
Ensure reportData.audit contains the actual data from getLatestAudit() and matches the structure expected by ReportData.
3. Update report-generator.ts to Access Correct Fields
Goal: Fix how generatePdfReport() accesses fields from the ReportData interface and remove any hardcoded dummy data.
Action:
In report-generator.ts, check the implementation of generatePdfReport() to see how it accesses fields from the ReportData interface.
Update the code to access the correct fields (e.g., data.audit.overview.score, data.audit.keywords.suggestions, etc.).
Remove any hardcoded dummy data or fallbacks.
Example (Pseudo-code):
typescript

Collapse

Wrap

Copy
// In report-generator.ts
import { jsPDF } from 'jsPDF';

interface ReportData {
  location: any;
  audit: {
    overview: { score: number; recommendations: string[] };
    keywords: { suggestions: { keyword: string; volume: number; difficulty: number }[] };
    reviews: { priorityReviews: { reviewer: string; rating: number; comment: string }[] };
    // ... other tab data
  };
  competitors: any;
}

export async function generatePdfReport(data: ReportData): Promise<string> {
  const doc = new jsPDF();

  // Log the data to verify
  console.log('Data received by generatePdfReport:', data);

  // Add cover page
  doc.setFont('Montserrat', 'bold');
  doc.setFontSize(24);
  doc.setTextColor('#000000');
  doc.text('Google Business Profile Audit Report', 105, 50, { align: 'center' });

  // Add audit data
  doc.setFontSize(18);
  doc.text('Overview', 20, 80);
  doc.setFontSize(12);
  doc.setTextColor('#F97316');
  doc.text(`Score: ${data.audit.overview.score}/100`, 20, 90);
  doc.setTextColor('#000000');
  doc.text('Recommendations:', 20, 100);
  data.audit.overview.recommendations.forEach((rec, index) => {
    doc.text(`- ${rec}`, 30, 110 + index * 10);
  });

  // Add keywords data
  doc.setFontSize(18);
  doc.text('Keywords', 20, 130);
  doc.setFontSize(12);
  doc.text('Suggested Keywords:', 20, 140);
  data.audit.keywords.suggestions.forEach((keyword, index) => {
    doc.text(`- ${keyword.keyword} (Volume: ${keyword.volume}, Difficulty: ${keyword.difficulty})`, 30, 150 + index * 10);
  });

  // ... add other sections (Reviews, Posting, Citations, etc.)

  // Save the PDF
  const pdfOutput = doc.output('datauristring');
  // Save to storage (e.g., AWS S3) and return URL
  const pdfUrl = await saveToStorage(pdfOutput);
  return pdfUrl;
}
Check:
Add a log statement in generatePdfReport() to print the data object.
Ensure the fields accessed (e.g., data.audit.overview.score) exist in the data object and contain the actual audit data.
Search for and remove any hardcoded dummy data (e.g., const dummyData = { ... }).
4. Add Logging for Debugging
Goal: Trace the data flow to identify where the dummy data is being introduced.
Action:
Add logs in audit-service.ts to print the output of getLatestAudit().
Add logs in reports-routes.ts to print the reportData object before passing it to generatePdfReport().
Add logs in report-generator.ts to print the data object received by generatePdfReport() and the fields being accessed.
Example Logs:
In audit-service.ts: console.log('Audit Data:', auditData);
In reports-routes.ts: console.log('Report Data:', reportData);
In report-generator.ts: console.log('Data received by generatePdfReport:', data);
5. Remove Dummy Data Fallbacks
Goal: Ensure the system fails gracefully instead of falling back to dummy data.
Action:
Search for hardcoded dummy data in reports-routes.ts and report-generator.ts.
Replace any fallback logic with proper error handling.
Example:
Before (with dummy data fallback):
typescript

Collapse

Wrap

Copy
const auditData = await gbpAuditService.getLatestAudit(locationId);
const reportData = auditData || dummyAuditData; // Fallback to dummy data
After (with error handling):
typescript

Collapse

Wrap

Copy
const auditData = await gbpAuditService.getLatestAudit(locationId);
if (!auditData) {
  throw new Error('No audit data found for this location');
}
const reportData = auditData;
Final Answer
Root Cause
The PDF report is showing hardcoded dummy data because:

The getLatestAudit() function in audit-service.ts might not be returning the correct data from the GBP Insights tabs, causing the system to fall back to dummy data.
The reports-routes.ts file might be structuring the data incorrectly or using dummy data as a fallback when the actual data is missing.
The generatePdfReport() function in report-generator.ts might be accessing fields from the ReportData interface incorrectly, leading to undefined values and triggering a fallback to dummy data.
Solution
Update audit-service.ts:
Ensure getLatestAudit() fetches the actual data from the GBP Insights tabs (Overview, Keywords, Reviews, etc.) by calling the same endpoints or services used by the /client/gbp-audit screens.
Add logging to verify the returned data.
Fix reports-routes.ts:
Ensure the data passed to generatePdfReport() matches the ReportData interface.
Remove any fallback to dummy data and add proper error handling.
Add logging to verify the data structure.
Update report-generator.ts:
Fix how generatePdfReport() accesses fields from the ReportData interface.
Remove any hardcoded dummy data or fallbacks.
Add logging to verify the data being accessed.
Add Logging:
Add logs at each step (data retrieval, data structuring, data access) to trace the data flow and identify where the dummy data is being introduced.
Next Steps
Share this analysis with your developers and have them implement the fixes outlined above.
Check the server logs after adding the logging statements to confirm that the actual audit data is being fetched and passed through the system.
Test the PDF report generation to ensure it now shows the correct data from the /client/gbp-audit screens and tabs.