Identified Issues and Solutions
1. Random Coordinates Displayed for Non-Geo-Tagged Images
Problem: When you select an image that doesn’t have geo coordinates, the latitude and longitude fields show random values instead of being empty, which is confusing.

Cause: In the GeoTagging.tsx component, the handleImageSelect function doesn’t explicitly clear the searchCoords state when an image lacks geo tags. If searchCoords retains previous values, it displays those instead of resetting.

Solution: Modify the handleImageSelect function to explicitly set searchCoords to empty strings when the selected image has no geo tags. Here’s the corrected code:

typescript

Collapse

Wrap

Copy
const handleImageSelect = (image: ImageWithGeoTag) => {
  setSelectedImage(image);
  if (image.hasGeoTag && image.geoTag?.lat && image.geoTag?.lng) {
    setSearchCoords({
      lat: image.geoTag.lat.toString(),
      lng: image.geoTag.lng.toString()
    });
  } else {
    setSearchCoords({
      lat: '',
      lng: ''
    });
  }
};
Explanation:

The if condition checks if the image has valid geo tags (hasGeoTag and geoTag with lat and lng).
If true, it populates searchCoords with the existing coordinates.
If false (no geo tags), it resets searchCoords to empty strings, ensuring the fields appear blank.
Verification: After this change, selecting a non-geo-tagged image will show empty input fields, avoiding confusion with random or leftover coordinates.

2. Missing Button for Non-Geo-Tagged Images
Problem: There’s no button to add geo tags to images that don’t already have them, unlike geo-tagged images which have a “Save Geo Tag” button.

Cause: In the provided GeoTagging.tsx, the “Save Geo Tag” button is rendered whenever an image is selected (selectedImage is not null), but you might have assumed it only appears for geo-tagged images due to unclear UI flow or conditional rendering in your actual implementation.

Solution: Ensure the “Save Geo Tag” button is always visible and functional when an image is selected, regardless of its geo-tag status. The provided code already does this correctly:

typescript

Collapse

Wrap

Copy
{selectedImage && (
  <Button
    onClick={handleSaveGeoTag}
    className="bg-[#F28C38] text-white hover:bg-[#F28C38]/90"
    disabled={saving}
  >
    {saving ? (
      <>
        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
        Saving...
      </>
    ) : (
      <>
        <Save className="h-4 w-4 mr-2" />
        Save Geo Tag
      </>
    )}
  </Button>
)}
Explanation:

The button is wrapped in a {selectedImage && ...} condition, meaning it appears as soon as an image is selected.
It’s not conditional on hasGeoTag, so it works for both geo-tagged and non-geo-tagged images.
The handleSaveGeoTag function validates and saves coordinates, making it suitable for adding new geo tags.
Additional Suggestion: If your current implementation hides this button for non-geo-tagged images, remove any such condition (e.g., selectedImage?.hasGeoTag) and use the above pattern. To enhance clarity, you could:

Add a “Remove Geo Tag” button only for geo-tagged images (already present in the code).
Style the “Save Geo Tag” button differently for new vs. existing geo tags if desired.
3. Tab Switching After Saving Geo Tags
Problem: After editing and saving a geo tag, the application switches from the “Geo Tagging” tab back to the “Current Images” tab, disrupting the workflow.

Cause: In ImageOptimizationPage.tsx and GeoTagging.tsx, the tab state isn’t properly preserved after a mutation. React Query’s invalidateQueries might trigger a re-render that resets the tab, or the parent component’s activeTab state isn’t explicitly maintained post-save.

Solution: Use the activeTabRef and setParentTab props to explicitly keep the tab on “geo-tagging” after saving. The provided code attempts this, but let’s ensure it’s robust across all mutations. Here’s the fix in GeoTagging.tsx:

Update the updateImageMutation’s onSuccess:
typescript

Collapse

Wrap

Copy
updateImageMutation.mutate(imageToUpdate, {
  onSuccess: () => {
    setSaving(false);
    toast({
      title: "Geo Tag Saved",
      description: `Geolocation data has been added to ${selectedImage.title}.`,
      variant: "default",
    });
    // Update selected image locally
    setSelectedImage({
      ...selectedImage,
      hasGeoTag: true,
      geoTag: { lat, lng }
    });
    // Explicitly keep the parent on the "geo-tagging" tab
    if (setParentTab && currentTab === 'geo-tagging') {
      setParentTab('geo-tagging');
    }
    // Invalidate only the geo-tagging query to refresh data without tab switch
    queryClient.invalidateQueries({ queryKey: ['geo-tagging-images', locationId] });
  },
  onError: (error) => {
    setSaving(false);
    toast({
      title: "Error Saving Geo Tag",
      description: `Failed to save geo tag: ${error instanceof Error ? error.message : 'Unknown error'}`,
      variant: "destructive",
    });
  }
});
Ensure Parent Tab Control in ImageOptimizationPage.tsx:
typescript

Collapse

Wrap

Copy
const handleTabChange = (value: string) => {
  activeTabRef.current = value;
  setActiveTab(value);
};
Explanation:

The setParentTab('geo-tagging') call in onSuccess forces the parent component to stay on the “geo-tagging” tab after a save.
activeTabRef persists the tab state across renders, preventing resets.
Using specific query invalidation (['geo-tagging-images', locationId]) ensures only the geo-tagging data refreshes, not the entire image set, reducing the chance of tab switching.
Across All Tabs: Apply this pattern to other child components (e.g., UploadImages.tsx):

In uploadImagesMutation’s onSuccess:
typescript

Collapse

Wrap

Copy
onSuccess: (data) => {
  if (setParentTab && currentTab === 'upload-images') {
    setParentTab('upload-images');
  }
  queryClient.invalidateQueries({ queryKey: ['upload-images', locationId] });
  // ... rest of the logic
}
Additional Improvements
Input Validation
To prevent invalid coordinates from causing issues:

Use type="number" with min, max, and step attributes in the inputs:
html

Collapse

Wrap

Copy
<Input 
  id="latitude"
  type="number"
  step="any"
  min="-90"
  max="90"
  value={searchCoords.lat}
  onChange={e => setSearchCoords({...searchCoords, lat: e.target.value})}
  placeholder="e.g. 34.0522"
  className="w-full text-black bg-white"
/>
<Input 
  id="longitude"
  type="number"
  step="any"
  min="-180"
  max="180"
  value={searchCoords.lng}
  onChange={e => setSearchCoords({...searchCoords, lng: e.target.value})}
  placeholder="e.g. -118.2437"
  className="w-full text-black bg-white"
/>
The handleSaveGeoTag function already validates ranges and NaN values, which is good.
Map Integration
Consider adding a real map (e.g., Google Maps) to GeoTagging.tsx for visual coordinate selection, replacing the placeholder:

typescript

Collapse

Wrap

Copy
<div className="w-full h-[300px] bg-gray-100 rounded-lg mb-6 relative overflow-hidden cursor-crosshair" onClick={handleMapClick}>
This would improve usability.

Error Handling
The current toast notifications are solid, but you could add more specific messages for validation failures (already implemented in handleSaveGeoTag).

Final Answer
To fix the geo-tagging issues in your application:

Clear Coordinates for Non-Geo-Tagged Images:
Update handleImageSelect in GeoTagging.tsx to set searchCoords to { lat: '', lng: '' } when image.hasGeoTag is false.
Add Button for Non-Geo-Tagged Images:
Ensure the “Save Geo Tag” button is always shown when selectedImage exists (already correct in the provided code). Remove any conditions hiding it for non-geo-tagged images if present in your version.
Prevent Tab Switching:
In GeoTagging.tsx, add setParentTab('geo-tagging') in updateImageMutation’s onSuccess.
In ImageOptimizationPage.tsx, use activeTabRef and handleTabChange to maintain tab state.
Apply this pattern (e.g., setParentTab('upload-images')) to other components like UploadImages.tsx.
These changes will ensure empty fields for non-geo-tagged images, a consistent “Save Geo Tag” button, and stable tab navigation. Test the flow after implementing these fixes, and let me know if you need further adjustments!