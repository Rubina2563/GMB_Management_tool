import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useParams, useLocation } from "wouter";
import { motion, AnimatePresence } from "framer-motion";
import { format, parseISO, addDays, isBefore, isAfter } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { 
  Loader2, Plus, Calendar as CalendarIcon, Image, Link, Trash2, Edit, Eye, 
  BarChart, LineChart, Clock, Calendar as CalIcon, Zap, RefreshCcw, 
  ChevronRight, ChevronLeft, User, ThumbsUp, ExternalLink 
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";
import { colors } from "@/lib/colors";

// Define post status badge variants
const getStatusBadgeClass = (status: string) => {
  switch (status) {
    case "published":
      return "bg-[#F28C38] text-white";
    case "scheduled":
      return "bg-[#F28C38] text-white";
    case "draft":
      return "bg-[#F28C38] text-white";
    case "failed":
      return "bg-red-500 text-white";
    default:
      return "bg-[#F28C38] text-white";
  }
};

interface Post {
  id: number;
  location_id: number;
  title: string;
  content: string;
  image_url?: string;
  cta_type?: "LEARN_MORE" | "BOOK" | "ORDER" | "SHOP" | "SIGN_UP" | "CALL";
  cta_url?: string;
  scheduled_date?: Date;
  status: "draft" | "scheduled" | "published" | "failed";
  published_at?: Date;
}

interface PostResponse {
  success: boolean;
  message: string;
  post: Post;
}

interface PostsListResponse {
  success: boolean;
  message: string;
  posts: Post[];
}

interface GeneratedPost {
  title: string;
  content: string;
  image_prompt?: string;
}

interface GeneratePostResponse {
  success: boolean;
  message: string;
  generated_post: GeneratedPost;
}

export default function PostsPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const [, navigate] = useLocation();
  const { locationId } = useParams<{ locationId: string }>();

  // State for post form
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isGenerateDialogOpen, setIsGenerateDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [currentPost, setCurrentPost] = useState<Post | null>(null);
  const [postForm, setPostForm] = useState({
    title: "",
    content: "",
    image_url: "",
    cta_type: "LEARN_MORE" as "LEARN_MORE" | "BOOK" | "ORDER" | "SHOP" | "SIGN_UP" | "CALL",
    cta_url: "",
    scheduled_date: new Date(),
    status: "draft" as "draft" | "scheduled" | "published" | "failed"
  });

  // State for AI generation form
  const [generateForm, setGenerateForm] = useState({
    prompt: "",
    service_type: "",
    tone: "professional" as "professional" | "casual" | "friendly" | "formal"
  });
  const [generatedPost, setGeneratedPost] = useState<GeneratedPost | null>(null);
  const [activeTab, setActiveTab] = useState<string>("scheduled");
  
  // Handle submenu clicks
  useEffect(() => {
    const handleSubMenuClick = (event: CustomEvent) => {
      const { id } = event.detail;
      if (id === 'create') {
        setActiveTab('create');
      } else if (['scheduled', 'published', 'draft', 'analytics'].includes(id)) {
        setActiveTab(id);
      }
    };
    
    window.addEventListener('submenuClicked', handleSubMenuClick as EventListener);
    
    return () => {
      window.removeEventListener('submenuClicked', handleSubMenuClick as EventListener);
    };
  }, []);

  // Load posts for the location
  const { 
    data: postsData, 
    isLoading: isLoadingPosts,
    error: postsError,
    refetch
  } = useQuery<PostsListResponse>({
    queryKey: ['/api/posts', locationId],
    queryFn: async () => {
      // If locationId is not provided, use the first location
      if (!locationId) {
        // Fetch all locations
        const locationsResponse = await apiRequest('GET', '/api/gbp/locations');
        const locationsData = await locationsResponse.json();
        if (locationsData.success && locationsData.locations && locationsData.locations.length > 0) {
          // Use the first location's ID
          const firstLocationId = locationsData.locations[0].id;
          const response = await apiRequest('GET', `/api/posts/${firstLocationId}`);
          return await response.json();
        } else {
          throw new Error('No locations available');
        }
      } else {
        const response = await apiRequest('GET', `/api/posts/${locationId}`);
        return await response.json();
      }
    },
    enabled: true, // Always try to fetch posts
  });

  // Create a new post
  const createPostMutation = useMutation({
    mutationFn: async (post: typeof postForm) => {
      const response = await apiRequest('POST', `/api/posts/${locationId}`, post);
      return await response.json();
    },
    onSuccess: (data: PostResponse) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message,
      });
      setIsCreateDialogOpen(false);
      resetPostForm();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Update an existing post
  const updatePostMutation = useMutation({
    mutationFn: async (post: Partial<Post> & { id: number }) => {
      const { id, ...postData } = post;
      const response = await apiRequest('PUT', `/api/posts/${locationId}/${id}`, postData);
      return await response.json();
    },
    onSuccess: (data: PostResponse) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message,
      });
      setIsCreateDialogOpen(false);
      resetPostForm();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Delete a post
  const deletePostMutation = useMutation({
    mutationFn: async (postId: number) => {
      const response = await apiRequest('DELETE', `/api/posts/${locationId}/${postId}`);
      return await response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message,
      });
      setIsDeleteDialogOpen(false);
      setCurrentPost(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Update post status
  const updatePostStatusMutation = useMutation({
    mutationFn: async ({ postId, status }: { postId: number, status: "draft" | "scheduled" | "published" | "failed" }) => {
      const response = await apiRequest('PUT', `/api/posts/${locationId}/${postId}/status`, { status });
      return await response.json();
    },
    onSuccess: (data: PostResponse) => {
      queryClient.invalidateQueries({ queryKey: ['/api/posts', locationId] });
      toast({
        title: "Success",
        description: data.message,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Generate post content using AI
  const generatePostMutation = useMutation({
    mutationFn: async (data: typeof generateForm) => {
      const response = await apiRequest('POST', `/api/posts/${locationId}/generate`, data);
      return await response.json();
    },
    onSuccess: (data: GeneratePostResponse) => {
      setGeneratedPost(data.generated_post);
      toast({
        title: "Success",
        description: "Generated post content successfully",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const resetPostForm = () => {
    setPostForm({
      title: "",
      content: "",
      image_url: "",
      cta_type: "LEARN_MORE",
      cta_url: "",
      scheduled_date: new Date(),
      status: "draft"
    });
    setCurrentPost(null);
  };

  const handleCreateOrUpdate = () => {
    if (currentPost) {
      updatePostMutation.mutate({
        id: currentPost.id,
        ...postForm
      });
    } else {
      createPostMutation.mutate(postForm);
    }
  };

  const handleGeneratePost = () => {
    generatePostMutation.mutate(generateForm);
  };

  const handleUseGeneratedPost = () => {
    if (generatedPost) {
      setPostForm(prev => ({
        ...prev,
        title: generatedPost.title,
        content: generatedPost.content,
      }));
      setIsGenerateDialogOpen(false);
      setIsCreateDialogOpen(true);
    }
  };

  const handleEditPost = (post: Post) => {
    setCurrentPost(post);
    setPostForm({
      title: post.title,
      content: post.content,
      image_url: post.image_url || "",
      cta_type: post.cta_type || "LEARN_MORE",
      cta_url: post.cta_url || "",
      scheduled_date: post.scheduled_date ? new Date(post.scheduled_date) : new Date(),
      status: post.status
    });
    setIsCreateDialogOpen(true);
  };

  const handleDeletePost = (post: Post) => {
    setCurrentPost(post);
    setIsDeleteDialogOpen(true);
  };

  // Filter posts by status
  const draftPosts = postsData?.posts.filter(post => post.status === "draft") || [];
  const scheduledPosts = postsData?.posts.filter(post => post.status === "scheduled") || [];
  const publishedPosts = postsData?.posts.filter(post => post.status === "published") || [];

  // Show loading state while fetching location data
  if (isLoadingPosts) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <Loader2 className="h-10 w-10 text-[#F28C38] animate-spin mb-4" />
        <p className="text-gray-600">Loading posts data...</p>
      </div>
    );
  }
  
  // Show error state if posts could not be loaded
  if (postsError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <h1 className="text-2xl font-bold text-red-500 mb-4">Error Loading Posts</h1>
        <p className="text-gray-600 mb-6">{postsError.message}</p>
        <Button onClick={() => refetch()} variant="outline">
          Retry
        </Button>
      </div>
    );
  }

  return (
    <div className="container py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          Post Management
        </h1>
        <div className="flex gap-3">
          <Dialog open={isGenerateDialogOpen} onOpenChange={setIsGenerateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                <span className="mr-1">AI Generate</span>
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-[500px] bg-white">
              <DialogHeader>
                <DialogTitle className="text-black">Generate Post Content with AI</DialogTitle>
                <DialogDescription>
                  Provide details about the post you want to create.
                </DialogDescription>
              </DialogHeader>

              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="prompt" className="text-black">Prompt</Label>
                  <Textarea className="text-black"
                    id="prompt"
                    placeholder="What kind of post do you want to create?"
                    value={generateForm.prompt}
                    onChange={(e) => setGenerateForm({ ...generateForm, prompt: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="service_type" className="text-black">Service Type</Label>
                  <Input className="text-black"
                    id="service_type"
                    placeholder="What service are you promoting?"
                    value={generateForm.service_type}
                    onChange={(e) => setGenerateForm({ ...generateForm, service_type: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="tone" className="text-black">Tone</Label>
                  <Select 
                    value={generateForm.tone} 
                    onValueChange={(value) => setGenerateForm({ ...generateForm, tone: value as "professional" | "casual" | "friendly" | "formal" })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="friendly">Friendly</SelectItem>
                      <SelectItem value="formal">Formal</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {generatedPost && (
                  <div className="mt-6 p-4 border rounded-md bg-white">
                    <h3 className="font-medium mb-2 text-black">Generated Content</h3>
                    <h4 className="font-bold text-[#F28C38]">{generatedPost.title}</h4>
                    <p className="mt-2 text-sm text-black">{generatedPost.content}</p>
                    {generatedPost.image_prompt && (
                      <div className="mt-2 text-sm text-gray-600 border-t pt-2">
                        <span className="font-medium text-[#F28C38]">Image prompt:</span> {generatedPost.image_prompt}
                      </div>
                    )}
                  </div>
                )}
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsGenerateDialogOpen(false)}>
                  Cancel
                </Button>
                {generatedPost ? (
                  <Button 
                    onClick={handleUseGeneratedPost}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    Use Generated Post
                  </Button>
                ) : (
                  <Button 
                    onClick={handleGeneratePost}
                    disabled={generatePostMutation.isPending}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    {generatePostMutation.isPending ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      "Generate"
                    )}
                  </Button>
                )}
              </DialogFooter>
            </DialogContent>
          </Dialog>

          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                <Plus size={16} className="mr-1" />
                Create Post
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-[600px] bg-white">
              <DialogHeader>
                <DialogTitle className="text-black">{currentPost ? "Edit Post" : "Create New Post"}</DialogTitle>
                <DialogDescription>
                  {currentPost 
                    ? "Update your post details below" 
                    : "Fill in the details to create a new post"}
                </DialogDescription>
              </DialogHeader>

              <div className="grid gap-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="title" className="text-black">Title</Label>
                  <Input className="text-black"
                    id="title"
                    placeholder="Enter post title"
                    value={postForm.title}
                    onChange={(e) => setPostForm({ ...postForm, title: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="content" className="text-black">Content</Label>
                  <Textarea className="text-black"
                    id="content"
                    placeholder="Enter post content"
                    value={postForm.content}
                    rows={5}
                    onChange={(e) => setPostForm({ ...postForm, content: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="image_url" className="text-black">Image URL (optional)</Label>
                  <div className="flex gap-2">
                    <Input className="text-black"
                      id="image_url"
                      placeholder="https://example.com/image.jpg"
                      value={postForm.image_url}
                      onChange={(e) => setPostForm({ ...postForm, image_url: e.target.value })}
                    />
                    <Button variant="outline" size="icon">
                      <Image size={16} />
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="cta_type" className="text-black">CTA Type (optional)</Label>
                    <Select 
                      value={postForm.cta_type} 
                      onValueChange={(value) => setPostForm({ ...postForm, cta_type: value as any })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select CTA type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="LEARN_MORE">Learn More</SelectItem>
                        <SelectItem value="BOOK">Book</SelectItem>
                        <SelectItem value="ORDER">Order</SelectItem>
                        <SelectItem value="SHOP">Shop</SelectItem>
                        <SelectItem value="SIGN_UP">Sign Up</SelectItem>
                        <SelectItem value="CALL">Call</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="cta_url" className="text-black">CTA URL (optional)</Label>
                    <div className="flex gap-2">
                      <Input className="text-black"
                        id="cta_url"
                        placeholder="https://example.com"
                        value={postForm.cta_url}
                        onChange={(e) => setPostForm({ ...postForm, cta_url: e.target.value })}
                      />
                      <Button variant="outline" size="icon">
                        <Link size={16} />
                      </Button>
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>Scheduled Date</Label>
                  <div className="border rounded-md p-4">
                    <Calendar
                      mode="single"
                      selected={postForm.scheduled_date}
                      onSelect={(date) => date && setPostForm({ ...postForm, scheduled_date: date })}
                      className="rounded-md border"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="status" className="text-black">Status</Label>
                  <Select 
                    value={postForm.status} 
                    onValueChange={(value) => setPostForm({ ...postForm, status: value as "draft" | "scheduled" | "published" | "failed" })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="draft">Draft</SelectItem>
                      <SelectItem value="scheduled">Scheduled</SelectItem>
                      {currentPost?.status === "published" && (
                        <SelectItem value="published">Published</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => {
                  resetPostForm();
                  setIsCreateDialogOpen(false);
                }}>
                  Cancel
                </Button>
                <Button 
                  onClick={handleCreateOrUpdate}
                  disabled={createPostMutation.isPending || updatePostMutation.isPending}
                  className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                >
                  {(createPostMutation.isPending || updatePostMutation.isPending) ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {currentPost ? "Updating..." : "Creating..."}
                    </>
                  ) : (
                    currentPost ? "Update Post" : "Create Post"
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent className="bg-white">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-black">Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the post.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => currentPost && deletePostMutation.mutate(currentPost.id)}
              className="bg-red-500 hover:bg-red-600"
            >
              {deletePostMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete"
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="mb-6 bg-black text-white">
          <TabsTrigger 
            value="create" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <Plus size={16} />
            Create Post
          </TabsTrigger>
          <TabsTrigger 
            value="scheduled" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <CalendarIcon size={16} />
            Scheduled
            {scheduledPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{scheduledPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="published"
            className="data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            Published
            {publishedPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{publishedPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="draft"
            className="data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            Drafts
            {draftPosts.length > 0 && (
              <Badge className="ml-2 bg-[#F28C38] text-white">{draftPosts.length}</Badge>
            )}
          </TabsTrigger>
          <TabsTrigger 
            value="analytics" 
            className="flex items-center gap-2 data-[state=active]:bg-[#F28C38] data-[state=active]:text-white"
          >
            <BarChart size={16} />
            Analytics
          </TabsTrigger>
        </TabsList>

        {isLoadingPosts ? (
          <div className="flex justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-[#F28C38]" />
          </div>
        ) : postsError ? (
          <div className="text-center py-12">
            <p className="text-red-500 mb-4">Failed to load posts</p>
            <Button variant="outline" onClick={() => refetch()}>
              Retry
            </Button>
          </div>
        ) : (
          <>
            <TabsContent value="create" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="h-full bg-white shadow-md">
                  <CardHeader>
                    <CardTitle className="text-black">Create New Post</CardTitle>
                    <CardDescription className="text-black">Fill in the details to create a new post for your Google Business Profile</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="new-post-title" className="text-black">Title</Label>
                      <Input className="text-black"
                        id="new-post-title"
                        placeholder="Enter post title"
                        value={postForm.title}
                        onChange={(e) => setPostForm({ ...postForm, title: e.target.value })}
                        className="text-black"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="new-post-content" className="text-black">Content</Label>
                      <Textarea className="text-black"
                        id="new-post-content"
                        placeholder="Enter post content"
                        value={postForm.content}
                        rows={4}
                        onChange={(e) => setPostForm({ ...postForm, content: e.target.value })}
                      />
                      <p className="text-xs text-muted-foreground text-right">
                        {postForm.content.length}/1500 characters
                      </p>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="new-post-image" className="text-black">Image URL</Label>
                      <Input className="text-black"
                        id="new-post-image"
                        placeholder="Enter image URL"
                        value={postForm.image_url}
                        onChange={(e) => setPostForm({ ...postForm, image_url: e.target.value })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="new-post-cta-type" className="text-black">Call to Action</Label>
                      <Select 
                        value={postForm.cta_type} 
                        onValueChange={(value) => setPostForm({ ...postForm, cta_type: value as any })}
                      >
                        <SelectTrigger id="new-post-cta-type">
                          <SelectValue placeholder="Select CTA type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="LEARN_MORE">Learn More</SelectItem>
                          <SelectItem value="BOOK">Book</SelectItem>
                          <SelectItem value="ORDER">Order</SelectItem>
                          <SelectItem value="SHOP">Shop</SelectItem>
                          <SelectItem value="SIGN_UP">Sign Up</SelectItem>
                          <SelectItem value="CALL">Call</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="new-post-cta-url" className="text-black">CTA URL</Label>
                      <Input className="text-black"
                        id="new-post-cta-url"
                        placeholder="Enter URL for your call to action"
                        value={postForm.cta_url}
                        onChange={(e) => setPostForm({ ...postForm, cta_url: e.target.value })}
                      />
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <Label htmlFor="new-post-schedule" className="text-black">Schedule</Label>
                        <div className="flex items-center space-x-2">
                          <Switch 
                            id="schedule-toggle"
                            checked={postForm.status === "scheduled"}
                            onCheckedChange={(checked) => 
                              setPostForm({ ...postForm, status: checked ? "scheduled" : "draft" })
                            }
                          />
                          <Label htmlFor="schedule-toggle" className="text-black text-sm cursor-pointer">
                            {postForm.status === "scheduled" ? "Scheduled" : "Draft"}
                          </Label>
                        </div>
                      </div>
                      {postForm.status === "scheduled" && (
                        <div className="p-3 border rounded-md">
                          <Calendar
                            mode="single"
                            selected={postForm.scheduled_date}
                            onSelect={(date) => date && setPostForm({ ...postForm, scheduled_date: date })}
                            disabled={(date) => isBefore(date, new Date())}
                            className="rounded-md border text-black"
                          />
                        </div>
                      )}
                    </div>
                    <div className="pt-4">
                      <div className="flex flex-col space-y-2">
                        <Button
                          onClick={() => setIsGenerateDialogOpen(true)}
                          variant="outline" 
                          className="w-full border-[#F28C38] text-[#F28C38] hover:bg-[#F28C38] hover:text-white"
                        >
                          <Zap size={16} className="mr-2" />
                          Generate with AI
                        </Button>
                        <Button
                          onClick={handleCreateOrUpdate}
                          disabled={createPostMutation.isPending}
                          className="w-full bg-[#F28C38] hover:bg-[#F5A461] text-white"
                        >
                          {createPostMutation.isPending ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Creating...
                            </>
                          ) : (
                            <>
                              <Plus size={16} className="mr-2" />
                              {currentPost ? "Update Post" : "Create Post"}
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="h-full bg-white shadow-md rounded-lg overflow-hidden">
                  <CardHeader className="border-b pb-3">
                    <CardTitle className="text-lg font-medium text-black">Post Preview</CardTitle>
                    <CardDescription className="text-black">How your post will appear in Google Business Profile</CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                    <div className="p-6 bg-white rounded-md">
                      <div className="flex items-center mb-3">
                        <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center mr-3">
                          <User size={20} className="text-gray-500" />
                        </div>
                        <div>
                          <p className="font-medium">Your Business Name</p>
                          <p className="text-xs text-gray-500">Just now · <ExternalLink size={12} className="inline" /></p>
                        </div>
                      </div>
                      
                      {postForm.image_url && (
                        <div className="mb-4 rounded overflow-hidden">
                          <img 
                            src={postForm.image_url} 
                            alt="Post image" 
                            className="w-full h-48 object-cover"
                            onError={(e) => (e.target as HTMLImageElement).src = 'https://via.placeholder.com/300x150?text=Invalid+Image+URL'}
                          />
                        </div>
                      )}
                      
                      <h3 className="text-lg font-bold mb-2">{postForm.title || "Your Post Title"}</h3>
                      <p className="text-sm text-gray-700 mb-4">{postForm.content || "Your post content will appear here. Add content to see how it will look."}</p>
                      
                      {postForm.cta_type && (
                        <div className="flex mt-2">
                          <Button variant="outline" className="text-sm border-[#F28C38] text-[#F28C38] hover:bg-[#F28C38] hover:text-white">
                            {postForm.cta_type.replace('_', ' ')}
                          </Button>
                        </div>
                      )}
                      
                      <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-100">
                        <div className="flex items-center space-x-3 text-gray-500">
                          <div className="flex items-center">
                            <ThumbsUp size={16} className="mr-1" />
                            <span className="text-xs">0</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              <Card className="bg-white shadow-md">
                <CardHeader>
                  <CardTitle className="text-lg text-black">Best Posting Times</CardTitle>
                  <CardDescription className="text-black">Recommended times to post based on historical engagement</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-3">
                    <Badge className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                      <Clock size={14} className="mr-1" /> Wednesday 10:00 AM
                    </Badge>
                    <Badge className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                      <Clock size={14} className="mr-1" /> Monday 8:30 AM
                    </Badge>
                    <Badge className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                      <Clock size={14} className="mr-1" /> Friday 3:00 PM
                    </Badge>
                    <Badge className="bg-[#F28C38] hover:bg-[#F5A461] text-white">
                      <Clock size={14} className="mr-1" /> Saturday 11:00 AM
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="scheduled" className="space-y-4">
              {scheduledPosts.length === 0 ? (
                <div className="text-center py-12 border rounded-lg">
                  <p className="text-gray-500 mb-4">No scheduled posts</p>
                  <Button 
                    onClick={() => setIsCreateDialogOpen(true)}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    <Plus size={16} className="mr-1" />
                    Create a Post
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <AnimatePresence>
                    {scheduledPosts.map((post) => (
                      <motion.div
                        key={post.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Card className="overflow-hidden bg-white shadow-md">
                          {post.image_url && (
                            <div className="h-48 overflow-hidden">
                              <img 
                                src={post.image_url} 
                                alt={post.title} 
                                className="w-full h-full object-cover transition-transform hover:scale-105"
                              />
                            </div>
                          )}
                          <CardContent className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <Badge className={getStatusBadgeClass(post.status)}>
                                {post.status}
                              </Badge>
                              <div className="flex space-x-1">
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleEditPost(post)}
                                >
                                  <Edit size={16} />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleDeletePost(post)}
                                >
                                  <Trash2 size={16} className="text-red-500" />
                                </Button>
                              </div>
                            </div>
                            <h3 className="font-bold text-lg mb-2">{post.title}</h3>
                            <p className="text-sm text-black line-clamp-3 mb-3">
                              {post.content}
                            </p>
                            <div className="flex flex-col space-y-2">
                              {post.scheduled_date && (
                                <div className="text-xs text-gray-500 flex items-center">
                                  <CalendarIcon size={14} className="mr-1" />
                                  Scheduled for: {format(new Date(post.scheduled_date), 'MMM dd, yyyy')}
                                </div>
                              )}
                              {post.cta_type && post.cta_url && (
                                <div className="text-xs text-green-600 flex items-center">
                                  <Link size={14} className="mr-1" />
                                  {post.cta_type.replace('_', ' ')}: {post.cta_url}
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              )}
            </TabsContent>

            <TabsContent value="published">
              {publishedPosts.length === 0 ? (
                <div className="text-center py-12 border rounded-lg">
                  <p className="text-gray-500 mb-4">No published posts</p>
                  <Button 
                    onClick={() => setIsCreateDialogOpen(true)}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    <Plus size={16} className="mr-1" />
                    Create a Post
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <AnimatePresence>
                    {publishedPosts.map((post) => (
                      <motion.div
                        key={post.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Card className="overflow-hidden bg-white shadow-md">
                          {post.image_url && (
                            <div className="h-48 overflow-hidden">
                              <img 
                                src={post.image_url} 
                                alt={post.title} 
                                className="w-full h-full object-cover transition-transform hover:scale-105"
                              />
                            </div>
                          )}
                          <CardContent className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <Badge className={getStatusBadgeClass(post.status)}>
                                {post.status}
                              </Badge>
                              <div className="flex space-x-1">
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleEditPost(post)}
                                >
                                  <Edit size={16} />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleDeletePost(post)}
                                >
                                  <Trash2 size={16} className="text-red-500" />
                                </Button>
                              </div>
                            </div>
                            <h3 className="font-bold text-lg mb-2">{post.title}</h3>
                            <p className="text-sm text-black line-clamp-3 mb-3">
                              {post.content}
                            </p>
                            <div className="flex flex-col space-y-2">
                              {post.published_at && (
                                <div className="text-xs text-gray-500 flex items-center">
                                  <CalendarIcon size={14} className="mr-1" />
                                  Published: {format(new Date(post.published_at), 'MMM dd, yyyy')}
                                </div>
                              )}
                              {post.cta_type && post.cta_url && (
                                <div className="text-xs text-green-600 flex items-center">
                                  <Link size={14} className="mr-1" />
                                  {post.cta_type.replace('_', ' ')}: {post.cta_url}
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              )}
            </TabsContent>

            <TabsContent value="draft">
              {draftPosts.length === 0 ? (
                <div className="text-center py-12 border rounded-lg">
                  <p className="text-gray-500 mb-4">No draft posts</p>
                  <Button 
                    onClick={() => setIsCreateDialogOpen(true)}
                    className="bg-[#F28C38] hover:bg-[#F5A461] text-white"
                  >
                    <Plus size={16} className="mr-1" />
                    Create a Post
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <AnimatePresence>
                    {draftPosts.map((post) => (
                      <motion.div
                        key={post.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Card className="overflow-hidden bg-white shadow-md">
                          {post.image_url && (
                            <div className="h-48 overflow-hidden">
                              <img 
                                src={post.image_url} 
                                alt={post.title} 
                                className="w-full h-full object-cover transition-transform hover:scale-105"
                              />
                            </div>
                          )}
                          <CardContent className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <Badge className={getStatusBadgeClass(post.status)}>
                                {post.status}
                              </Badge>
                              <div className="flex space-x-1">
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleEditPost(post)}
                                >
                                  <Edit size={16} />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="icon"
                                  onClick={() => handleDeletePost(post)}
                                >
                                  <Trash2 size={16} className="text-red-500" />
                                </Button>
                              </div>
                            </div>
                            <h3 className="font-bold text-lg mb-2">{post.title}</h3>
                            <p className="text-sm text-black line-clamp-3 mb-3">
                              {post.content}
                            </p>
                            <div className="flex flex-col space-y-2">
                              {post.cta_type && post.cta_url && (
                                <div className="text-xs text-green-600 flex items-center">
                                  <Link size={14} className="mr-1" />
                                  {post.cta_type.replace('_', ' ')}: {post.cta_url}
                                </div>
                              )}
                              <div className="flex justify-end mt-2">
                                <Button 
                                  size="sm" 
                                  variant="outline"
                                  className="text-xs"
                                  onClick={() => updatePostStatusMutation.mutate({ 
                                    postId: post.id, 
                                    status: "scheduled" 
                                  })}
                                >
                                  Schedule
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="analytics" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card className="bg-white shadow-md">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg text-black">Total Posts</CardTitle>
                    <CardDescription>All time posts created</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-3xl font-bold text-[#1C2526]">
                      {postsData?.posts.length || 0}
                    </div>
                    <p className="text-sm text-muted-foreground mt-2">
                      <span className="text-green-500 font-medium">+{Math.floor(Math.random() * 5) + 1}</span> new in last 30 days
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-white shadow-md">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg text-black">Total Views</CardTitle>
                    <CardDescription>All posts combined</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-3xl font-bold text-[#1C2526]">
                      {Math.floor(Math.random() * 15000) + 5000}
                    </div>
                    <p className="text-sm text-muted-foreground mt-2">
                      <span className="text-green-500 font-medium">+{Math.floor(Math.random() * 15) + 5}%</span> from last month
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-white shadow-md">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg text-black">Average Engagement</CardTitle>
                    <CardDescription>Click-through rate</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-3xl font-bold text-[#1C2526]">
                      {(Math.random() * 6 + 3).toFixed(1)}%
                    </div>
                    <p className="text-sm text-muted-foreground mt-2">
                      <span className={Math.random() > 0.5 ? "text-green-500 font-medium" : "text-red-500 font-medium"}>
                        {Math.random() > 0.5 ? "+" : "-"}{(Math.random() * 1.5).toFixed(1)}%
                      </span> from last month
                    </p>
                  </CardContent>
                </Card>
              </div>

              <Card className="bg-white shadow-md">
                <CardHeader>
                  <CardTitle className="text-black">Post Performance</CardTitle>
                  <CardDescription>Views and engagement over time</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[300px] border rounded-md p-4 flex items-center justify-center bg-white">
                    <div className="w-full h-full flex flex-col items-center justify-center text-center">
                      <BarChart className="h-16 w-16 text-[#6B5B95] mb-4" />
                      <h3 className="text-lg font-medium mb-2">Performance Chart</h3>
                      <p className="text-sm text-gray-500 max-w-md">
                        Here we would render a Chart.js line chart showing post views over time.
                        The chart would display data for the selected date range with daily/weekly views.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="rounded-lg border bg-white shadow-md">
                <div className="p-4 border-b">
                  <h3 className="font-medium text-black">Post Analytics</h3>
                  <p className="text-sm text-muted-foreground">Details of each post's performance</p>
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b bg-muted/50">
                        <th className="py-3 px-4 text-left font-medium">Post</th>
                        <th className="py-3 px-4 text-left font-medium">Type</th>
                        <th className="py-3 px-4 text-left font-medium">Published</th>
                        <th className="py-3 px-4 text-right font-medium">Views</th>
                        <th className="py-3 px-4 text-right font-medium">Clicks</th>
                        <th className="py-3 px-4 text-right font-medium">CTR</th>
                      </tr>
                    </thead>
                    <tbody>
                      {postsData?.posts.length === 0 ? (
                        <tr>
                          <td colSpan={6} className="py-6 text-center text-muted-foreground">
                            No posts data available
                          </td>
                        </tr>
                      ) : (
                        postsData?.posts.map((post) => {
                          const views = Math.floor(Math.random() * 2000) + 100;
                          const clicks = Math.floor(views * (Math.random() * 0.1 + 0.01));
                          const ctr = ((clicks / views) * 100).toFixed(2);
                          
                          return (
                            <tr key={post.id} className="border-b">
                              <td className="py-3 px-4">
                                <div className="flex items-center">
                                  {post.image_url ? (
                                    <div className="w-8 h-8 rounded overflow-hidden mr-3">
                                      <img 
                                        src={post.image_url} 
                                        alt="" 
                                        className="w-full h-full object-cover"
                                        onError={(e) => (e.target as HTMLImageElement).src = 'https://via.placeholder.com/32?text=IMG'}
                                      />
                                    </div>
                                  ) : (
                                    <div className="w-8 h-8 rounded bg-gray-100 flex items-center justify-center mr-3">
                                      <Image size={16} className="text-gray-400" />
                                    </div>
                                  )}
                                  <span className="font-medium truncate max-w-[200px]">{post.title}</span>
                                </div>
                              </td>
                              <td className="py-3 px-4">
                                <Badge variant="outline">
                                  {post.cta_type || "UPDATE"}
                                </Badge>
                              </td>
                              <td className="py-3 px-4 text-muted-foreground">
                                {post.published_at 
                                  ? format(new Date(post.published_at), 'MMM dd, yyyy') 
                                  : post.status === "scheduled" 
                                    ? `Scheduled: ${format(new Date(post.scheduled_date!), 'MMM dd, yyyy')}`
                                    : post.status
                                }
                              </td>
                              <td className="py-3 px-4 text-right font-medium">{views.toLocaleString()}</td>
                              <td className="py-3 px-4 text-right font-medium">{clicks.toLocaleString()}</td>
                              <td className="py-3 px-4 text-right font-medium">
                                <span className={
                                  parseFloat(ctr) > 5 
                                    ? "text-green-600" 
                                    : parseFloat(ctr) > 2 
                                      ? "text-amber-600" 
                                      : "text-red-600"
                                }>
                                  {ctr}%
                                </span>
                              </td>
                            </tr>
                          );
                        })
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
              
              <Card className="bg-white shadow-md">
                <CardHeader>
                  <CardTitle className="text-black">Optimization Suggestions</CardTitle>
                  <CardDescription>AI-powered insights to improve post performance</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 border rounded-md bg-[#F9F9F9]">
                    <h4 className="font-medium text-[#1C2526] mb-2">Use more engaging images</h4>
                    <p className="text-sm text-[#1C2526]">
                      Posts with high-quality, relevant images receive 2.3x more engagement. 
                      Consider using professional photography of your business and products.
                    </p>
                  </div>
                  
                  <div className="p-4 border rounded-md bg-[#F9F9F9]">
                    <h4 className="font-medium text-[#1C2526] mb-2">Optimize posting schedule</h4>
                    <p className="text-sm text-[#1C2526]">
                      Your audience is most active on weekdays between 9am-11am. 
                      Consider scheduling posts during these times for maximum reach.
                    </p>
                  </div>
                  
                  <div className="p-4 border rounded-md bg-[#F9F9F9]">
                    <h4 className="font-medium text-[#1C2526] mb-2">Include clear calls-to-action</h4>
                    <p className="text-sm text-[#1C2526]">
                      Posts with specific CTAs like "Book Now" or "Call Today" perform 40% better 
                      than posts without clear action steps.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </>
        )}
      </Tabs>
    </div>
  );
}